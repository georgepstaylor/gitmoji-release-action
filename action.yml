---
name: gitmoji-release-action
description: Creates a release with gitmoji labels

inputs:
  GITHUB_TOKEN:
    description: "GitHub token"
    required: true
  release_type:
    description: "Type of release"
    required: true
  tag_name:
    description: "Tag name"
    required: false
  auto_create_tag:
    description: "Auto create tag"
    required: false
    default: "false"
  title_suffix:
    description: "Title suffix"
    required: false
    default: "Release"
  use_v:
    description: "Use v prefix for tag name"
    required: false
    default: "true"
  draft:
    description: "Draft release"
    required: false
    default: "false"
  prerelease:
    description: "Pre-release"
    required: false
    default: "false"
  latest:
    description: "Make the release the latest"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Get the latest release
      id: get-release
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      run: |
        # get the latest non draft release
        echo "tag=$(gh release list --order desc --limit 1 --json tagName,isLatest,isDraft | jq -rj '.[] | select(.isDraft == false) | select(.isLatest == true) | .tagName')" >> $GITHUB_OUTPUT

    - name: Bump release
      id: bump-release
      shell: bash
      if: ${{ inputs.auto_create_tag == 'true' }}
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      run: |
        current_tag=$(echo "${{ steps.get-release.outputs.tag }}" | cut -d 'v' -f2)
        echo $current_tag
        if [[ ${{ inputs.release_type }} == "dev" ]]; then
        if [[ $current_tag == *-dev* ]]; then
          if [[ $current_tag =~ -dev([0-9]+)$ ]]; then
            num=${BASH_REMATCH[1]}
            new_num=$((num + 1))
            new_tag=$(echo $current_tag | sed "s/-dev$num/-dev$new_num/")
          else
            new_tag="$current_tag-dev1"
          fi
        else
          new_tag="$current_tag-dev"
        fi
        elif [[ ${{ inputs.release_type }} == "patch" ]]; then
          new_tag=$(echo $current_tag | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
        elif [[ ${{ inputs.release_type }} == "minor" ]]; then
          new_tag=$(echo $current_tag | awk -F. '{$(NF-1) = $(NF-1) + 1; $NF = 0;} 1' | sed 's/ /./g')
        elif [[ ${{ inputs.release_type }} == "major" ]]; then
          new_tag=$(echo $current_tag | awk -F. '{$1 = $1 + 1; $(NF-1) = 0; $NF = 0;} 1' | sed 's/ /./g')
        fi
        echo $new_tag
        if [[ "${{ inputs.use_v }}" == "true" ]]; then
          echo "final_tag=v${new_tag}" >> $GITHUB_OUTPUT
        else
          echo "final_tag=${new_tag}" >> $GITHUB_OUTPUT
        fi
        echo $final_tag

    - name: Create release [auto]
      shell: bash
      if: ${{ inputs.auto_create_tag == 'true' }}
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      run: |
        # if latest input is true set the latest flag
        if [[ ${{ inputs.latest }} == "true" ]]; then
          latest="--latest"
        else
          latest=""
        fi
        # if prerelease input is true set the prerelease flag
        if [[ ${{ inputs.prerelease }} == "true" ]]; then
          prerelease="--prerelease"
        else
          prerelease=""
        fi
        # if draft input is true set the draft flag
        if [[ ${{ inputs.draft }} == "true" ]]; then
          draft="--draft"
        else
          draft=""
        fi
        gh release create ${{ steps.bump-release.outputs.final_tag }} -t "${{ steps.bump-release.outputs.final_tag }} ${{ inputs.title_suffix }}" --generate-notes $draft $prerelease $latest

    - name: Create release [manual]
      shell: bash
      if: ${{ inputs.auto_create_tag != 'true' }}
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      run: |
        # if latest input is true set the latest flag
        if [[ ${{ inputs.latest }} == "true" ]]; then
          latest="--latest"
        else
          latest=""
        fi
        # if prerelease input is true set the prerelease flag
        if [[ ${{ inputs.prerelease }} == "true" ]]; then
          prerelease="--prerelease"
        else
          prerelease=""
        fi
        # if draft input is true set the draft flag
        if [[ ${{ inputs.draft }} == "true" ]]; then
          draft="--draft"
        else
          draft=""
        fi
        gh release create ${{ inputs.tag_name }} -t "${{ inputs.tag_name }} ${{ inputs.title_suffix }}" --generate-notes $draft $prerelease $latest

branding:
  icon: "check-circle"
  color: "green"
